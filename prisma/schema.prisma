// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator zod {
  provider                         = "zod-prisma-types"
　　　　output                           = "./generated/zod" // 出力ディレクトリの指定
  useMultipleFiles                 = true // スキーマを複数ファイルに分割
  writeBarrelFiles                 = false // バレルファイルの生成を無効化
  createInputTypes                 = false // 入力タイプの生成を無効化
  createModelTypes                 = true // モデルタイプの生成を有効化
  addInputTypeValidation           = true // 入力タイプに対するバリデーションの追加
  createOptionalDefaultValuesTypes = true // デフォルト値を持つフィールドをオプショナルに
  createRelationValuesTypes        = true // リレーションフィールドを含むタイプの生成
  createPartialTypes               = true // 全フィールドをオプショナルにしたパーシャルタイプの生成
  useDefaultValidators             = false // Zodのデフォルトバリデータの使用を無効化
}


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}